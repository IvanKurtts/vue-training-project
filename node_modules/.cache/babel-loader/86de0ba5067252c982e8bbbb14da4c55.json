{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PostForm from \"@/components/PostForm.vue\";\nimport PostList from \"@/components/PostList.vue\";\nimport MyButton from \"@/components/UI/MyButton.vue\";\nimport axios from \"axios\";\nimport MySelect from \"@/components/UI/MySelect.vue\";\nexport default {\n  components: {\n    PostList,\n    PostForm,\n    MyButton,\n    MySelect\n  },\n  data() {\n    return {\n      posts: [],\n      dialogVisible: false,\n      isPostsLoading: false,\n      selectedSort: '',\n      searchQuery: '',\n      page: 1,\n      limit: 10,\n      totalPages: 0,\n      sortOptions: [{\n        value: 'title',\n        name: 'По названию'\n      }, {\n        value: 'body',\n        name: 'По содержимому'\n      }]\n    };\n  },\n  methods: {\n    createPost(post) {\n      this.posts.push(post);\n      this.dialogVisible = false;\n    },\n    removePost(post) {\n      this.posts = this.posts.filter(p => p.id !== post.id);\n    },\n    showDialog() {\n      this.dialogVisible = 'true';\n    },\n    // changePage(pageNumber) {\n    //     this.page = pageNumber;\n    //     this.fetchPosts()\n    // },\n    async fetchPosts() {\n      try {\n        this.isPostsLoading = true;\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n          params: {\n            _page: this.page,\n            _limit: this.limit\n          }\n        });\n        this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit);\n        this.posts = response.data;\n      } catch (e) {\n        alert('Ошибка!');\n      } finally {\n        this.isPostsLoading = false;\n      }\n    },\n    async loadMorePosts() {\n      try {\n        this.page += 1;\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n          params: {\n            _page: this.page,\n            _limit: this.limit\n          }\n        });\n        this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit);\n        this.posts = [...this.posts, ...response.data];\n      } catch (e) {\n        alert('Ошибка!');\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n    // const options = {\n    // // root: document.querySelector('#scrollArea'),\n    // rootMargin: '0px',\n    // threshold: 1.0\n    // }\n    // const callback = (entries, observer) => {\n    //   if (entries[0].isIntersecting && this.page < this.totalPages) {\n    //     this.loadMorePosts()\n    //   }\n    // };\n    // const observer = new IntersectionObserver(callback, options);\n    // observer.observe(this.$refs.observer);\n  },\n\n  computed: {\n    sortedPosts() {\n      return [...this.posts].sort((post1, post2) => {\n        return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort]);\n      });\n    },\n    sortedAndSearchedPosts() {\n      return this.sortedPosts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  },\n  watch: {\n    // page() {\n    //     this.fetchPosts()\n    // }\n  }\n};","map":{"version":3,"mappings":"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","names":["PostForm","PostList","MyButton","axios","MySelect","components","data","posts","dialogVisible","isPostsLoading","selectedSort","searchQuery","page","limit","totalPages","sortOptions","value","name","methods","createPost","post","push","removePost","filter","p","id","showDialog","fetchPosts","response","get","params","_page","_limit","Math","ceil","headers","e","alert","loadMorePosts","mounted","computed","sortedPosts","sort","post1","post2","localeCompare","sortedAndSearchedPosts","title","toLowerCase","includes","watch"],"sourceRoot":"","sources":["C:\\Users\\ivank\\Desktop\\vue-project\\src\\pages\\UserPage.vue"],"sourcesContent":["<template>\r\n    <div> \r\n        <h1>Страница с постами</h1>\r\n        <my-input\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"Поиск...\"\r\n        v-focus \r\n        />\r\n        <div class=\"app__btns\">\r\n        <my-button \r\n          @click=\"showDialog\"\r\n        >\r\n        Создать пост\r\n        </my-button>\r\n        <my-select\r\n            v-model=\"selectedSort\"\r\n            :options=\"sortOptions\"\r\n        ></my-select>\r\n        </div>\r\n        <!-- <my-button @click=\"fetchPosts\">Получить посты</my-button> -->\r\n        <my-dialog v-model:show=\"dialogVisible\">  \r\n         <post-form\r\n         @create=\"createPost\"\r\n         />\r\n        </my-dialog>\r\n    \r\n      <post-list\r\n      :posts=\"sortedAndSearchedPosts\"\r\n      @remove=\"removePost\"\r\n      v-if=\"!isPostsLoading\"\r\n       />\r\n    <div v-else>Идет загрузка...</div>\r\n    <div v-intersection=\"loadMorePosts\" class=\"observer\"></div>\r\n    <!-- <div class=\"page__wrapper\">\r\n        <div \r\n        v-for=\"pageNumber in totalPages\" \r\n        :key=\"pageNumber\" \r\n        class=\"page\"\r\n        :class=\"{\r\n            'current-page': page === pageNumber\r\n        }\"\r\n        @click=\"changePage(pageNumber)\"\r\n        >\r\n        {{ pageNumber }}\r\n        </div>\r\n    </div> -->\r\n    </div>\r\n    </template>\r\n    \r\n    <script>\r\n    import PostForm from \"@/components/PostForm.vue\"\r\n    import PostList from \"@/components/PostList.vue\"\r\n    import MyButton from \"@/components/UI/MyButton.vue\"\r\n    import axios from \"axios\"\r\n    import MySelect from \"@/components/UI/MySelect.vue\"\r\n    \r\n    \r\n    export default {\r\n        components: {\r\n           PostList,  PostForm, MyButton, MySelect\r\n        },\r\n    \r\n        data() {\r\n            return {\r\n                posts: [],\r\n                dialogVisible: false,\r\n                isPostsLoading: false,\r\n                selectedSort: '',\r\n                searchQuery: '',\r\n                page: 1,\r\n                limit:10,\r\n                totalPages: 0,\r\n                sortOptions: [\r\n                    {value: 'title', name: 'По названию'},\r\n                    {value: 'body', name: 'По содержимому'},\r\n                ]\r\n            }\r\n        },\r\n    \r\n        methods: {\r\n            createPost(post) {\r\n                this.posts.push(post);\r\n                this.dialogVisible = false;\r\n            },\r\n            removePost(post) {\r\n                this.posts = this.posts.filter(p => p.id !== post.id)\r\n            },\r\n            showDialog() {\r\n                this.dialogVisible = 'true';\r\n            },\r\n            // changePage(pageNumber) {\r\n            //     this.page = pageNumber;\r\n            //     this.fetchPosts()\r\n            // },\r\n            async fetchPosts() {\r\n                try {\r\n                    this.isPostsLoading = true;\r\n                    const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n                        params: {\r\n                            _page: this.page,\r\n                            _limit: this.limit\r\n                        }\r\n                    });\r\n                    this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\r\n                    this.posts = response.data;\r\n                } catch (e) {\r\n                    alert('Ошибка!');\r\n                } finally {\r\n                    this.isPostsLoading = false;\r\n                }\r\n            },\r\n    \r\n            async loadMorePosts() {\r\n                try {\r\n                    this.page+=1;\r\n                    const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n                        params: {\r\n                            _page: this.page,\r\n                            _limit: this.limit\r\n                        }\r\n                    });\r\n                    this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\r\n                    this.posts = [...this.posts, ...response.data];\r\n                } catch (e) {\r\n                    alert('Ошибка!');\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            this.fetchPosts();\r\n            // const options = {\r\n            // // root: document.querySelector('#scrollArea'),\r\n            // rootMargin: '0px',\r\n            // threshold: 1.0\r\n            // }\r\n            // const callback = (entries, observer) => {\r\n            //   if (entries[0].isIntersecting && this.page < this.totalPages) {\r\n            //     this.loadMorePosts()\r\n            //   }\r\n            // };\r\n            // const observer = new IntersectionObserver(callback, options);\r\n            // observer.observe(this.$refs.observer);\r\n        },\r\n    \r\n        computed: {\r\n            sortedPosts() {\r\n                return [...this.posts].sort((post1, post2) => {\r\n                    return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort])\r\n                })\r\n            },\r\n    \r\n            sortedAndSearchedPosts() {\r\n                return this.sortedPosts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()))\r\n            }\r\n        },\r\n    \r\n        watch: {\r\n            // page() {\r\n            //     this.fetchPosts()\r\n            // }\r\n        }    \r\n    }\r\n    \r\n    </script>\r\n    \r\n    <style>   \r\n    .app__btns {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin: 15px 0;\r\n    }\r\n    \r\n    .page__wrapper {\r\n        display: flex;\r\n        margin-top: 15px;\r\n    }\r\n    \r\n    .page {\r\n        border: 1px solid black;\r\n        padding: 10px;\r\n    }\r\n    \r\n    .current-page {\r\n        border: 3px solid teal;\r\n        background: rgb(0, 240, 240);\r\n    }\r\n    \r\n    .observer{\r\n        height: 30px;\r\n    }\r\n    </style>"]},"metadata":{},"sourceType":"module"}