{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PostForm from \"@/components/PostForm.vue\";\nimport PostList from \"@/components/PostList.vue\";\nimport MyButton from \"@/components/UI/MyButton.vue\";\nimport axios from \"axios\";\nimport MySelect from \"@/components/UI/MySelect.vue\";\nimport MyInput from \"@/components/UI/MyInput.vue\";\nimport { mapState, mapGetters, mapActions, mapMutations } from \"vuex\";\nexport default {\n  components: {\n    PostList,\n    PostForm,\n    MyButton,\n    MySelect\n  },\n  data() {\n    return {\n      // posts: [],\n      dialogVisible: false\n      // isPostsLoading: false,\n      // selectedSort: '',\n      // searchQuery: '',\n      // page: 1,\n      // limit:10,\n      // totalPages: 0,\n      // sortOptions: [\n      //     {value: 'title', name: 'По названию'},\n      //     {value: 'body', name: 'По содержимому'},\n      // ]\n    };\n  },\n\n  methods: {\n    ...mapMutations({\n      setPage: 'post/setPage',\n      setSearchQuery: 'post/setSearchQuery',\n      setSelectedSort: 'post/setSelectedSort'\n    }),\n    ...mapActions({\n      loadMorePosts: 'post/loadMorePosts',\n      fetchPosts: 'post/fetchPosts'\n    }),\n    createPost(post) {\n      this.posts.push(post);\n      this.dialogVisible = false;\n    },\n    removePost(post) {\n      this.posts = this.posts.filter(p => p.id !== post.id);\n    },\n    showDialog() {\n      this.dialogVisible = 'true';\n    }\n    // changePage(pageNumber) {\n    //     this.page = pageNumber;\n    //     this.fetchPosts()\n    // },\n    // async fetchPosts() {\n    //     try {\n    //         this.isPostsLoading = true;\n    //         const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n    //             params: {\n    //                 _page: this.page,\n    //                 _limit: this.limit\n    //             }\n    //         });\n    //         this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\n    //         this.posts = response.data;\n    //     } catch (e) {\n    //         alert('Ошибка!');\n    //     } finally {\n    //         this.isPostsLoading = false;\n    //     }\n    // },\n\n    // async loadMorePosts() {\n    //     try {\n    //         this.page+=1;\n    //         const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n    //             params: {\n    //                 _page: this.page,\n    //                 _limit: this.limit\n    //             }\n    //         });\n    //         this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\n    //         this.posts = [...this.posts, ...response.data];\n    //     } catch (e) {\n    //         alert('Ошибка!');\n    //     }\n    // }\n  },\n\n  mounted() {\n    this.fetchPosts();\n    // const options = {\n    // // root: document.querySelector('#scrollArea'),\n    // rootMargin: '0px',\n    // threshold: 1.0\n    // }\n    // const callback = (entries, observer) => {\n    //   if (entries[0].isIntersecting && this.page < this.totalPages) {\n    //     this.loadMorePosts()\n    //   }\n    // };\n    // const observer = new IntersectionObserver(callback, options);\n    // observer.observe(this.$refs.observer);\n  },\n\n  computed: {\n    ...mapState({\n      posts: state => state.post.posts,\n      isPostsLoading: state => state.post.isPostsLoading,\n      selectedSort: state => state.post.selectedSort,\n      searchQuery: state => state.post.searchQuery,\n      page: state => state.post.page,\n      limit: state => state.post.limit,\n      totalPages: state => state.post.totalPages,\n      sortOptions: state => state.post.sortOptions\n    }),\n    ...mapGetters({\n      sortedPosts: 'post/sortedPosts',\n      sortedAndSearchedPosts: 'post/sortedAndSearchedPosts'\n    })\n\n    // sortedPosts() {\n    //     return [...this.posts].sort((post1, post2) => {\n    //         return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort])\n    //     })\n    // },\n\n    // sortedAndSearchedPosts() {\n    //     return this.sortedPosts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()))\n    // }\n  },\n\n  watch: {\n    // page() {\n    //     this.fetchPosts()\n    // }\n  }\n};","map":{"version":3,"mappings":";AA4DI,OAAOA,QAAO,MAAO,2BAA0B;AAC/C,OAAOC,QAAO,MAAO,2BAA0B;AAC/C,OAAOC,QAAO,MAAO,8BAA6B;AAClD,OAAOC,KAAI,MAAO,OAAM;AACxB,OAAOC,QAAO,MAAO,8BAA6B;AAClD,OAAOC,OAAM,MAAO,6BAA4B;AAChD,SAAQC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,YAAY,QAAO,MAAK;AAGlE,eAAe;EACXC,UAAU,EAAE;IACTT,QAAQ;IAAGD,QAAQ;IAAEE,QAAQ;IAAEE;EAClC,CAAC;EAEDO,IAAI,GAAG;IACH,OAAO;MACH;MACAC,aAAa,EAAE;MACf;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;EACJ,CAAC;;EAEDC,OAAO,EAAE;IACL,GAAGJ,YAAY,CAAC;MACZK,OAAO,EAAE,cAAc;MACvBC,cAAc,EAAE,qBAAqB;MACrCC,eAAe,EAAE;IACrB,CAAC,CAAC;IACF,GAAGR,UAAS,CAAG;MACXS,aAAa,EAAE,oBAAoB;MACnCC,UAAU,EAAE;IAChB,CAAC,CAAC;IACFC,UAAU,CAACC,IAAI,EAAE;MACb,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,IAAI,CAAC;MACrB,IAAI,CAACR,aAAY,GAAI,KAAK;IAC9B,CAAC;IACDW,UAAU,CAACH,IAAI,EAAE;MACb,IAAI,CAACC,KAAI,GAAI,IAAI,CAACA,KAAK,CAACG,MAAM,CAACC,KAAKA,CAAC,CAACC,EAAC,KAAMN,IAAI,CAACM,EAAE;IACxD,CAAC;IACDC,UAAU,GAAG;MACT,IAAI,CAACf,aAAY,GAAI,MAAM;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EACDgB,OAAO,GAAG;IACN,IAAI,CAACV,UAAU,EAAE;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EAEDW,QAAQ,EAAE;IACN,GAAGvB,QAAQ,CAAC;MACRe,KAAK,EAAES,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACC,KAAK;MAChCU,cAAc,EAAED,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACW,cAAc;MAClDC,YAAY,EAAEF,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACY,YAAY;MAC9CC,WAAW,EAAEH,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACa,WAAW;MAC5CC,IAAI,EAAEJ,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACc,IAAI;MAC9BC,KAAK,EAAEL,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACe,KAAK;MAChCC,UAAU,EAAEN,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACgB,UAAU;MAC1CC,WAAW,EAAEP,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACiB;IACrC,CAAC,CAAC;IACF,GAAG9B,UAAU,CAAC;MACV+B,WAAW,EAAE,kBAAkB;MAC/BC,sBAAsB,EAAE;IAC5B,CAAC;;IAED;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;EACJ,CAAC;;EAEDC,KAAK,EAAE;IACH;IACA;IACA;EAAA;AAER","names":["PostForm","PostList","MyButton","axios","MySelect","MyInput","mapState","mapGetters","mapActions","mapMutations","components","data","dialogVisible","methods","setPage","setSearchQuery","setSelectedSort","loadMorePosts","fetchPosts","createPost","post","posts","push","removePost","filter","p","id","showDialog","mounted","computed","state","isPostsLoading","selectedSort","searchQuery","page","limit","totalPages","sortOptions","sortedPosts","sortedAndSearchedPosts","watch"],"sourceRoot":"","sources":["C:\\Users\\ivank\\Desktop\\vue-project\\src\\pages\\PostPageWithStore.vue"],"sourcesContent":["<template>\r\n    <div> \r\n        \r\n        <!-- <h1>{{$store.state.isAuth ? 'Пользователь авторизован' : 'Авторизуйтесь, чтобы использовать сервис'}}</h1>\r\n        <h1>{{$store.getters.doubleLikes}}</h1>\r\n        <div>\r\n            <my-button @click=\"$store.commit('incrementLikes')\">Лайк</my-button>\r\n            <my-button @click=\"$store.commit('decrementLikes')\">Дизлайк</my-button>\r\n        </div> -->\r\n\r\n        <h1>Страница с постами</h1>\r\n        <my-input\r\n        :model-value=\"searchQuery\"\r\n        @update:model-value=\"setSearchQuery\"\r\n        placeholder=\"Поиск...\"\r\n        v-focus \r\n        />\r\n        <div class=\"app__btns\">\r\n        <my-button \r\n          @click=\"showDialog\"\r\n        >\r\n        Создать пост\r\n        </my-button>\r\n        <my-select\r\n            :model-value=\"selectedSort\"\r\n            @update:model-value=\"setSelectedSort\"\r\n            :options=\"sortOptions\"\r\n        />\r\n        </div>\r\n        <!-- <my-button @click=\"fetchPosts\">Получить посты</my-button> -->\r\n        <my-dialog v-model:show=\"dialogVisible\">  \r\n         <post-form\r\n         @create=\"createPost\"\r\n         />\r\n        </my-dialog>\r\n    \r\n      <post-list\r\n      :posts=\"sortedAndSearchedPosts\"\r\n      @remove=\"removePost\"\r\n      v-if=\"!isPostsLoading\"\r\n       />\r\n    <div v-else>Идет загрузка...</div>\r\n    <div v-intersection=\"loadMorePosts\" class=\"observer\"></div>\r\n    <!-- <div class=\"page__wrapper\">\r\n        <div \r\n        v-for=\"pageNumber in totalPages\" \r\n        :key=\"pageNumber\" \r\n        class=\"page\"\r\n        :class=\"{\r\n            'current-page': page === pageNumber\r\n        }\"\r\n        @click=\"changePage(pageNumber)\"\r\n        >\r\n        {{ pageNumber }}\r\n        </div>\r\n    </div> -->\r\n    </div>\r\n    </template>\r\n    \r\n    <script>\r\n    import PostForm from \"@/components/PostForm.vue\"\r\n    import PostList from \"@/components/PostList.vue\"\r\n    import MyButton from \"@/components/UI/MyButton.vue\"\r\n    import axios from \"axios\"\r\n    import MySelect from \"@/components/UI/MySelect.vue\"\r\n    import MyInput from \"@/components/UI/MyInput.vue\"\r\n    import {mapState, mapGetters, mapActions, mapMutations} from \"vuex\"\r\n    \r\n    \r\n    export default {\r\n        components: {\r\n           PostList,  PostForm, MyButton, MySelect\r\n        },\r\n    \r\n        data() {\r\n            return {\r\n                // posts: [],\r\n                dialogVisible: false,\r\n                // isPostsLoading: false,\r\n                // selectedSort: '',\r\n                // searchQuery: '',\r\n                // page: 1,\r\n                // limit:10,\r\n                // totalPages: 0,\r\n                // sortOptions: [\r\n                //     {value: 'title', name: 'По названию'},\r\n                //     {value: 'body', name: 'По содержимому'},\r\n                // ]\r\n            }\r\n        },\r\n    \r\n        methods: {\r\n            ...mapMutations({\r\n                setPage: 'post/setPage',\r\n                setSearchQuery: 'post/setSearchQuery',\r\n                setSelectedSort: 'post/setSelectedSort'\r\n            }),\r\n            ...mapActions ({\r\n                loadMorePosts: 'post/loadMorePosts',\r\n                fetchPosts: 'post/fetchPosts'\r\n            }),\r\n            createPost(post) {\r\n                this.posts.push(post);\r\n                this.dialogVisible = false;\r\n            },\r\n            removePost(post) {\r\n                this.posts = this.posts.filter(p => p.id !== post.id)\r\n            },\r\n            showDialog() {\r\n                this.dialogVisible = 'true';\r\n            },\r\n            // changePage(pageNumber) {\r\n            //     this.page = pageNumber;\r\n            //     this.fetchPosts()\r\n            // },\r\n            // async fetchPosts() {\r\n            //     try {\r\n            //         this.isPostsLoading = true;\r\n            //         const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n            //             params: {\r\n            //                 _page: this.page,\r\n            //                 _limit: this.limit\r\n            //             }\r\n            //         });\r\n            //         this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\r\n            //         this.posts = response.data;\r\n            //     } catch (e) {\r\n            //         alert('Ошибка!');\r\n            //     } finally {\r\n            //         this.isPostsLoading = false;\r\n            //     }\r\n            // },\r\n    \r\n            // async loadMorePosts() {\r\n            //     try {\r\n            //         this.page+=1;\r\n            //         const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n            //             params: {\r\n            //                 _page: this.page,\r\n            //                 _limit: this.limit\r\n            //             }\r\n            //         });\r\n            //         this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\r\n            //         this.posts = [...this.posts, ...response.data];\r\n            //     } catch (e) {\r\n            //         alert('Ошибка!');\r\n            //     }\r\n            // }\r\n        },\r\n        mounted() {\r\n            this.fetchPosts();\r\n            // const options = {\r\n            // // root: document.querySelector('#scrollArea'),\r\n            // rootMargin: '0px',\r\n            // threshold: 1.0\r\n            // }\r\n            // const callback = (entries, observer) => {\r\n            //   if (entries[0].isIntersecting && this.page < this.totalPages) {\r\n            //     this.loadMorePosts()\r\n            //   }\r\n            // };\r\n            // const observer = new IntersectionObserver(callback, options);\r\n            // observer.observe(this.$refs.observer);\r\n        },\r\n    \r\n        computed: {\r\n            ...mapState({\r\n                posts: state => state.post.posts,\r\n                isPostsLoading: state => state.post.isPostsLoading,\r\n                selectedSort: state => state.post.selectedSort,\r\n                searchQuery: state => state.post.searchQuery,\r\n                page: state => state.post.page,\r\n                limit: state => state.post.limit,\r\n                totalPages: state => state.post.totalPages,\r\n                sortOptions: state => state.post.sortOptions \r\n            }),\r\n            ...mapGetters({\r\n                sortedPosts: 'post/sortedPosts',\r\n                sortedAndSearchedPosts: 'post/sortedAndSearchedPosts'\r\n            })\r\n\r\n            // sortedPosts() {\r\n            //     return [...this.posts].sort((post1, post2) => {\r\n            //         return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort])\r\n            //     })\r\n            // },\r\n    \r\n            // sortedAndSearchedPosts() {\r\n            //     return this.sortedPosts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()))\r\n            // }\r\n        },\r\n    \r\n        watch: {\r\n            // page() {\r\n            //     this.fetchPosts()\r\n            // }\r\n        }    \r\n    }\r\n    \r\n    </script>\r\n    \r\n    <style>   \r\n    .app__btns {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin: 15px 0;\r\n    }\r\n    \r\n    .page__wrapper {\r\n        display: flex;\r\n        margin-top: 15px;\r\n    }\r\n    \r\n    .page {\r\n        border: 1px solid black;\r\n        padding: 10px;\r\n    }\r\n    \r\n    .current-page {\r\n        border: 3px solid teal;\r\n        background: rgb(0, 240, 240);\r\n    }\r\n    \r\n    .observer{\r\n        height: 30px;\r\n    }\r\n    </style>"]},"metadata":{},"sourceType":"module"}