{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, resolveDirective as _resolveDirective, createVNode as _createVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Страница с постами\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"app__btns\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = {\n  class: \"observer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_my_input = _resolveComponent(\"my-input\");\n  const _component_my_button = _resolveComponent(\"my-button\");\n  const _component_my_select = _resolveComponent(\"my-select\");\n  const _component_post_form = _resolveComponent(\"post-form\");\n  const _component_my_dialog = _resolveComponent(\"my-dialog\");\n  const _component_post_list = _resolveComponent(\"post-list\");\n  const _directive_focus = _resolveDirective(\"focus\");\n  const _directive_intersection = _resolveDirective(\"intersection\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" <h1>{{$store.state.isAuth ? 'Пользователь авторизован' : 'Авторизуйтесь, чтобы использовать сервис'}}</h1>\\r\\n        <h1>{{$store.getters.doubleLikes}}</h1>\\r\\n        <div>\\r\\n            <my-button @click=\\\"$store.commit('incrementLikes')\\\">Лайк</my-button>\\r\\n            <my-button @click=\\\"$store.commit('decrementLikes')\\\">Дизлайк</my-button>\\r\\n        </div> \"), _hoisted_1, _withDirectives(_createVNode(_component_my_input, {\n    \"model-value\": _ctx.searchQuery,\n    \"onUpdate:modelValue\": _ctx.setSearchQuery,\n    placeholder: \"Поиск...\"\n  }, null, 8 /* PROPS */, [\"model-value\", \"onUpdate:modelValue\"]), [[_directive_focus]]), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_my_button, {\n    onClick: $options.showDialog\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" Создать пост \")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_my_select, {\n    \"model-value\": _ctx.selectedSort,\n    \"onUpdate:modelValue\": _ctx.setSelectedSort,\n    options: _ctx.sortOptions\n  }, null, 8 /* PROPS */, [\"model-value\", \"onUpdate:modelValue\", \"options\"])]), _createCommentVNode(\" <my-button @click=\\\"fetchPosts\\\">Получить посты</my-button> \"), _createVNode(_component_my_dialog, {\n    show: $data.dialogVisible,\n    \"onUpdate:show\": _cache[0] || (_cache[0] = $event => $data.dialogVisible = $event)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_post_form, {\n      onCreate: $options.createPost\n    }, null, 8 /* PROPS */, [\"onCreate\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"show\"]), !_ctx.isPostsLoading ? (_openBlock(), _createBlock(_component_post_list, {\n    key: 0,\n    posts: _ctx.sortedAndSearchedPosts,\n    onRemove: $options.removePost\n  }, null, 8 /* PROPS */, [\"posts\", \"onRemove\"])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"Идет загрузка...\")), _withDirectives(_createElementVNode(\"div\", _hoisted_4, null, 512 /* NEED_PATCH */), [[_directive_intersection, _ctx.loadMorePosts]]), _createCommentVNode(\" <div class=\\\"page__wrapper\\\">\\r\\n        <div \\r\\n        v-for=\\\"pageNumber in totalPages\\\" \\r\\n        :key=\\\"pageNumber\\\" \\r\\n        class=\\\"page\\\"\\r\\n        :class=\\\"{\\r\\n            'current-page': page === pageNumber\\r\\n        }\\\"\\r\\n        @click=\\\"changePage(pageNumber)\\\"\\r\\n        >\\r\\n        {{ pageNumber }}\\r\\n        </div>\\r\\n    </div> \")]);\n}","map":{"version":3,"mappings":";gCAUQA,oBAA2B,YAAvB,oBAAkB;;EAOjBC,KAAK,EAAC;AAAW;;;;;EAyBUA,KAAK,EAAC;AAAU;;;;;;;;;;uBAzCpDC,oBAuDM,cArDFC,wYAKU,EAEVC,UAA2B,kBAC3BC,aAKEC;IAJD,aAAW,EAAEC,gBAAW;IACxB,qBAAkB,EAAEA,mBAAc;IACnCC,WAAW,EAAC;0FAGZR,oBAWM,OAXNS,UAWM,GAVNJ,aAIYK;IAHTC,OAAK,EAAEC;EAAU;sBACnB,MAED,kBAFC,gBAED;;kCACAP,aAIEQ;IAHG,aAAW,EAAEN,iBAAY;IACzB,qBAAkB,EAAEA,oBAAe;IACnCO,OAAO,EAAEP;gFAGdJ,oFAAkE,EAClEE,aAIYU;IAJOC,IAAI,EAAEC,mBAAa;yDAAbA,mBAAa;;sBACrC,MAEE,CAFFZ,aAEEa;MADDC,QAAM,EAAEP;IAAU;;gCAOfL,mBAAc,kBAHrBa,aAIGC;;IAHFC,KAAK,EAAEf,2BAAsB;IAC7BgB,QAAM,EAAEX;mEAGXV,oBAAkC,mBAAtB,kBAAgB,oBAC5BF,oBAA2D,OAA3DwB,UAA2D,0DAAtCjB,kBAAa,KAClCJ,8XAYU","names":["_createElementVNode","class","_createElementBlock","_createCommentVNode","_hoisted_1","_createVNode","_component_my_input","_ctx","placeholder","_hoisted_2","_component_my_button","onClick","$options","_component_my_select","options","_component_my_dialog","show","$data","_component_post_form","onCreate","_createBlock","_component_post_list","posts","onRemove","_hoisted_4"],"sourceRoot":"","sources":["C:\\Users\\ivank\\Desktop\\vue-project\\src\\pages\\PostPageWithStore.vue"],"sourcesContent":["<template>\r\n    <div> \r\n        \r\n        <!-- <h1>{{$store.state.isAuth ? 'Пользователь авторизован' : 'Авторизуйтесь, чтобы использовать сервис'}}</h1>\r\n        <h1>{{$store.getters.doubleLikes}}</h1>\r\n        <div>\r\n            <my-button @click=\"$store.commit('incrementLikes')\">Лайк</my-button>\r\n            <my-button @click=\"$store.commit('decrementLikes')\">Дизлайк</my-button>\r\n        </div> -->\r\n\r\n        <h1>Страница с постами</h1>\r\n        <my-input\r\n        :model-value=\"searchQuery\"\r\n        @update:model-value=\"setSearchQuery\"\r\n        placeholder=\"Поиск...\"\r\n        v-focus \r\n        />\r\n        <div class=\"app__btns\">\r\n        <my-button \r\n          @click=\"showDialog\"\r\n        >\r\n        Создать пост\r\n        </my-button>\r\n        <my-select\r\n            :model-value=\"selectedSort\"\r\n            @update:model-value=\"setSelectedSort\"\r\n            :options=\"sortOptions\"\r\n        />\r\n        </div>\r\n        <!-- <my-button @click=\"fetchPosts\">Получить посты</my-button> -->\r\n        <my-dialog v-model:show=\"dialogVisible\">  \r\n         <post-form\r\n         @create=\"createPost\"\r\n         />\r\n        </my-dialog>\r\n    \r\n      <post-list\r\n      :posts=\"sortedAndSearchedPosts\"\r\n      @remove=\"removePost\"\r\n      v-if=\"!isPostsLoading\"\r\n       />\r\n    <div v-else>Идет загрузка...</div>\r\n    <div v-intersection=\"loadMorePosts\" class=\"observer\"></div>\r\n    <!-- <div class=\"page__wrapper\">\r\n        <div \r\n        v-for=\"pageNumber in totalPages\" \r\n        :key=\"pageNumber\" \r\n        class=\"page\"\r\n        :class=\"{\r\n            'current-page': page === pageNumber\r\n        }\"\r\n        @click=\"changePage(pageNumber)\"\r\n        >\r\n        {{ pageNumber }}\r\n        </div>\r\n    </div> -->\r\n    </div>\r\n    </template>\r\n    \r\n    <script>\r\n    import PostForm from \"@/components/PostForm.vue\"\r\n    import PostList from \"@/components/PostList.vue\"\r\n    import MyButton from \"@/components/UI/MyButton.vue\"\r\n    import axios from \"axios\"\r\n    import MySelect from \"@/components/UI/MySelect.vue\"\r\n    import MyInput from \"@/components/UI/MyInput.vue\"\r\n    import {mapState, mapGetters, mapActions, mapMutations} from \"vuex\"\r\n    \r\n    \r\n    export default {\r\n        components: {\r\n           PostList,  PostForm, MyButton, MySelect\r\n        },\r\n    \r\n        data() {\r\n            return {\r\n                // posts: [],\r\n                dialogVisible: false,\r\n                // isPostsLoading: false,\r\n                // selectedSort: '',\r\n                // searchQuery: '',\r\n                // page: 1,\r\n                // limit:10,\r\n                // totalPages: 0,\r\n                // sortOptions: [\r\n                //     {value: 'title', name: 'По названию'},\r\n                //     {value: 'body', name: 'По содержимому'},\r\n                // ]\r\n            }\r\n        },\r\n    \r\n        methods: {\r\n            ...mapMutations({\r\n                setPage: 'post/setPage',\r\n                setSearchQuery: 'post/setSearchQuery',\r\n                setSelectedSort: 'post/setSelectedSort'\r\n            }),\r\n            ...mapActions ({\r\n                loadMorePosts: 'post/loadMorePosts',\r\n                fetchPosts: 'post/fetchPosts'\r\n            }),\r\n            createPost(post) {\r\n                this.posts.push(post);\r\n                this.dialogVisible = false;\r\n            },\r\n            removePost(post) {\r\n                this.posts = this.posts.filter(p => p.id !== post.id)\r\n            },\r\n            showDialog() {\r\n                this.dialogVisible = 'true';\r\n            },\r\n            // changePage(pageNumber) {\r\n            //     this.page = pageNumber;\r\n            //     this.fetchPosts()\r\n            // },\r\n            // async fetchPosts() {\r\n            //     try {\r\n            //         this.isPostsLoading = true;\r\n            //         const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n            //             params: {\r\n            //                 _page: this.page,\r\n            //                 _limit: this.limit\r\n            //             }\r\n            //         });\r\n            //         this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\r\n            //         this.posts = response.data;\r\n            //     } catch (e) {\r\n            //         alert('Ошибка!');\r\n            //     } finally {\r\n            //         this.isPostsLoading = false;\r\n            //     }\r\n            // },\r\n    \r\n            // async loadMorePosts() {\r\n            //     try {\r\n            //         this.page+=1;\r\n            //         const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n            //             params: {\r\n            //                 _page: this.page,\r\n            //                 _limit: this.limit\r\n            //             }\r\n            //         });\r\n            //         this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\r\n            //         this.posts = [...this.posts, ...response.data];\r\n            //     } catch (e) {\r\n            //         alert('Ошибка!');\r\n            //     }\r\n            // }\r\n        },\r\n        mounted() {\r\n            this.fetchPosts();\r\n            // const options = {\r\n            // // root: document.querySelector('#scrollArea'),\r\n            // rootMargin: '0px',\r\n            // threshold: 1.0\r\n            // }\r\n            // const callback = (entries, observer) => {\r\n            //   if (entries[0].isIntersecting && this.page < this.totalPages) {\r\n            //     this.loadMorePosts()\r\n            //   }\r\n            // };\r\n            // const observer = new IntersectionObserver(callback, options);\r\n            // observer.observe(this.$refs.observer);\r\n        },\r\n    \r\n        computed: {\r\n            ...mapState({\r\n                posts: state => state.post.posts,\r\n                isPostsLoading: state => state.post.isPostsLoading,\r\n                selectedSort: state => state.post.selectedSort,\r\n                searchQuery: state => state.post.searchQuery,\r\n                page: state => state.post.page,\r\n                limit: state => state.post.limit,\r\n                totalPages: state => state.post.totalPages,\r\n                sortOptions: state => state.post.sortOptions \r\n            }),\r\n            ...mapGetters({\r\n                sortedPosts: 'post/sortedPosts',\r\n                sortedAndSearchedPosts: 'post/sortedAndSearchedPosts'\r\n            })\r\n\r\n            // sortedPosts() {\r\n            //     return [...this.posts].sort((post1, post2) => {\r\n            //         return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort])\r\n            //     })\r\n            // },\r\n    \r\n            // sortedAndSearchedPosts() {\r\n            //     return this.sortedPosts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()))\r\n            // }\r\n        },\r\n    \r\n        watch: {\r\n            // page() {\r\n            //     this.fetchPosts()\r\n            // }\r\n        }    \r\n    }\r\n    \r\n    </script>\r\n    \r\n    <style>   \r\n    .app__btns {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin: 15px 0;\r\n    }\r\n    \r\n    .page__wrapper {\r\n        display: flex;\r\n        margin-top: 15px;\r\n    }\r\n    \r\n    .page {\r\n        border: 1px solid black;\r\n        padding: 10px;\r\n    }\r\n    \r\n    .current-page {\r\n        border: 3px solid teal;\r\n        background: rgb(0, 240, 240);\r\n    }\r\n    \r\n    .observer{\r\n        height: 30px;\r\n    }\r\n    </style>"]},"metadata":{},"sourceType":"module"}